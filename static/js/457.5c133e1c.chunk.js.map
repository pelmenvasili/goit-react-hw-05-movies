{"version":3,"file":"static/js/457.5c133e1c.chunk.js","mappings":"6OACA,EAAmC,kCAAnC,EAAoF,8BAApF,EAAgI,6BAAhI,EAA0K,4BAA1K,EAAqN,8BAArN,EAAmQ,+B,2BCkDnQ,EA7CgB,WACd,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BH,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IACED,GAAW,GACX,IAAME,EAAe,mCAAG,qGACKC,EAAAA,EAAAA,IAAkBR,GADvB,OAChBS,EADgB,OAEtBV,EAAWU,EAAaC,SAFF,2CAAH,qDAKrBH,GAOD,CANC,MAAOL,GACHA,EAAMS,UAAsC,MAA1BT,EAAMS,SAASC,QACnCT,GAAS,EAEZ,CAZD,QAaEE,GAAW,EACZ,CACF,GAAE,CAACL,IAEmB,IAAnBF,EAAQe,QACH,yDAIP,iBAAKC,UAAWC,EAAhB,WACE,eAAID,UAAWC,EAAf,qBACCX,IAAa,SAACY,EAAA,EAAD,IACbd,IAAS,+CACV,eAAIY,UAAWC,EAAf,SACGjB,EAAQmB,KAAI,SAAAC,GAAM,OACjB,gBAAoBJ,UAAWC,EAA/B,WACE,eAAID,UAAWC,EAAf,SAAkCG,EAAOC,UACzC,cAAGL,UAAWC,EAAd,SAAkCG,EAAOE,YAFlCF,EAAOG,GADC,QAS1B,C,+LChDKC,EAAM,mCAECC,EAAmB,mCAAG,4FACrB,gDACNC,EAAU,IAAIC,gBAAgB,CAClCC,QAASJ,IAHsB,kBAOFK,EAAAA,EAAAA,IAAA,UANnB,gDAMmB,YAAoBH,IAPlB,cAOzBI,EAPyB,yBAQxBA,EAAeC,KAAKnB,SARI,gCAU/BoB,QAAQC,IAAR,MAV+B,yDAAH,qDAcnBC,EAAc,mCAAG,WAAMX,GAAN,kFACtBY,EADsB,6CACsBZ,GAC5CG,EAAU,IAAIC,gBAAgB,CAClCC,QAASJ,IAHiB,kBAONK,EAAAA,EAAAA,IAAA,UAAaM,EAAb,YAAoBT,IAPd,cAOpBU,EAPoB,yBAQnBA,GARmB,gCAU1BJ,QAAQC,IAAR,MAV0B,yDAAH,sDAcdI,EAAc,mCAAG,WAAMd,GAAN,kFACtBY,EADsB,6CACsBZ,EADtB,YAEtBG,EAAU,IAAIC,gBAAgB,CAClCC,QAASJ,IAHiB,kBAONK,EAAAA,EAAAA,IAAA,UAAaM,EAAb,YAAoBT,IAPd,cAOpBU,EAPoB,yBAQnBA,EAAML,MARa,gCAU1BC,QAAQC,IAAR,MAV0B,yDAAH,sDAcdvB,EAAiB,mCAAG,WAAMa,GAAN,kFACzBY,EADyB,6CACmBZ,EADnB,YAEzBG,EAAU,IAAIC,gBAAgB,CAClCC,QAASJ,IAHoB,kBAOTK,EAAAA,EAAAA,IAAA,UAAaM,EAAb,YAAoBT,IAPX,cAOvBU,EAPuB,yBAQtBA,EAAML,MARgB,gCAU7BC,QAAQC,IAAR,MAV6B,yDAAH,sDAcjBK,EAAiB,mCAAG,WAAMC,GAAN,2HAEzBb,EAAU,IAAIC,gBAAgB,CAClCC,QAASJ,EACTgB,MAAOD,IAJsB,kBAQTV,EAAAA,EAAAA,IAAA,UARS,4CAQT,YAAoBH,IARX,cAQvBU,EARuB,yBAStBA,EAAML,KAAKnB,SATW,gCAW7BoB,QAAQC,IAAR,MAX6B,yDAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/components/Reviews/Reviews.module.css?7248","components/Reviews/Reviews.js","services/services.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"reviewsContainer\":\"Reviews_reviewsContainer__bHfUv\",\"reviewsTitle\":\"Reviews_reviewsTitle__mxqAS\",\"reviewsList\":\"Reviews_reviewsList__hDAQA\",\"reviewItem\":\"Reviews_reviewItem__ax7Fo\",\"reviewAuthor\":\"Reviews_reviewAuthor__f4lkL\",\"reviewContent\":\"Reviews_reviewContent__oX1fD\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport css from './Reviews.module.css';\nimport { fetchMovieReviews } from '../../services/services';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [error, setError] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n\n  useEffect(() => {\n    try {\n      setLoading(true);\n      const getMovieReviews = async () => {\n        const movieReviews = await fetchMovieReviews(movieId);\n        setReviews(movieReviews.results);\n      };\n\n      getMovieReviews();\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        setError(true);\n      }\n    } finally {\n      setLoading(false);\n    }\n  }, [movieId]);\n\n  if (reviews.length === 0) {\n    return <p>There are no reviews for now</p>;\n  }\n\n  return (\n    <div className={css.reviewsContainer}>\n      <h2 className={css.reviewsTitle}>Reviews</h2>\n      {isLoading && <Loader />}\n      {error && <h2>Data no avialable</h2>}\n      <ul className={css.reviewsList}>\n        {reviews.map(review => (\n          <li key={review.id} className={css.reviewItem}>\n            <h3 className={css.reviewAuthor}>{review.author}</h3>\n            <p className={css.reviewContent}>{review.content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\nconst KEY = '85aded699850148534e98bbdd6991e7d';\n\nexport const fetchTrendingMovies = async () => {\n  const URL = 'https://api.themoviedb.org/3/trending/all/day';\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const TrendingMovies = await axios.get(`${URL}?${options}`);\n    return TrendingMovies.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieById = async id => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}`;\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieCast = async id => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/credits`;\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchMovieReviews = async id => {\n  const URL = `https://api.themoviedb.org/3/movie/${id}/reviews`;\n  const options = new URLSearchParams({\n    api_key: KEY,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nexport const fetchSearchMovies = async search => {\n  const URL = `https://api.themoviedb.org/3/search/movie`;\n  const options = new URLSearchParams({\n    api_key: KEY,\n    query: search,\n  });\n\n  try {\n    const movie = await axios.get(`${URL}?${options}`);\n    return movie.data.results;\n  } catch (error) {\n    console.log(error);\n  }\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","error","setError","isLoading","setLoading","useEffect","getMovieReviews","fetchMovieReviews","movieReviews","results","response","status","length","className","css","Loader","map","review","author","content","id","KEY","fetchTrendingMovies","options","URLSearchParams","api_key","axios","TrendingMovies","data","console","log","fetchMovieById","URL","movie","fetchMovieCast","fetchSearchMovies","search","query"],"sourceRoot":""}